// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3824.Competition2017.commands;
import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc3824.Competition2017.Constants;
import org.usfirst.frc3824.Competition2017.RPiDataSource;
import org.usfirst.frc3824.Competition2017.Robot;
import org.usfirst.frc3824.Competition2017.Target;

/**
 *
 */
public class AutoPlaceGear extends Command {

	private RPiDataSource rpi = RPiDataSource.getInstance();
	private boolean done = false;
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public AutoPlaceGear() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.chassis);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
		// Set the PID up for driving straight
		Robot.chassis.encoderPID(0);
		
		// Drive forward with 0.8 power
		Robot.chassis.updateMagnitude(0.8);
		
		Robot.gear.setRotate(true);
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	Target target = rpi.getTarget();
    	
    	Robot.chassis.updateEncoderSetpointWithTarget(target);
    	
		double distanceDelta = target.calculateDistanceFromTarget() - Constants.LIFT_DISTANCE;

		if (distanceDelta < 0)
		{
			// Arrived at lift
			Robot.chassis.updateMagnitude(0); // stop driving
			Robot.gear.setGrab(false); // release gear
			
			done = true;
		}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return done;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.chassis.resetChassisPIDcontrollersAndEncoders();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
