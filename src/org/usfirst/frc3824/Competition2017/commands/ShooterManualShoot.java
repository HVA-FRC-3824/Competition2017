// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3824.Competition2017.commands;

import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc3824.Competition2017.Constants;
import org.usfirst.frc3824.Competition2017.Robot;

/**
 * Method to perform a manual shoot. The method sets the shooter speed and activates the feeder
 * when the shooter is at speed
 */
public class ShooterManualShoot extends Command
{
	// Instantiate a timer to determine 
	Timer timer = new Timer();

	private boolean m_shooter_started = false;
	private boolean m_feeder_started  = false;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public ShooterManualShoot()
	{
		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.shooter);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	// Called just before this Command runs the first time
	protected void initialize()
	{
		System.out.println("Shooter Manual Shoot initialize");
		// Enable the feeder to feed the balls
		Robot.shooter.enableFeederPID();
		
		// Enable the ball transport to help feed the balls
		Robot.ballPickup.enableTransport();
		
		// Initialize the timer
		timer.reset();
		timer.start();		
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute()
	{
		// start with feeder in reverse
		if (timer.get() < Constants.FEEDER_REVERSE_TIME)
		{
			// Enable the feeder to feed the balls
			Robot.shooter.enableFeederPID();

			// reverse feeder speed
			Robot.shooter.setFeederSpeed(Constants.FEEDER_REVERSE_SPEED);
		}
		else
		{
			// Use the shooter local speed value for speed - just need to enable
			Robot.shooter.enableShooterPIDs();

			// Set the shooter speed
			Robot.shooter.updateShooterSpeed();
		}
		
		// Wait for the shooter motor to reach the desired speed
		if (timer.get() > Constants.FEEDER_REVERSE_TIME + Constants.SHOOTER_SPINUP_TIME)
		{
			// Enable the feeder to feed the balls
			Robot.shooter.enableFeederPID();

			// Set the feeder speed
			Robot.shooter.setFeederSpeed(Constants.DEFAULT_FEEDER_SPEED);
		}
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished()
	{
//		// Determine when the user releases the shoot trigger
		if (Robot.oi.driveJoystick.getRawButton(1) == true)
			return false;
		
		return true;
	}

	// Called once after isFinished returns true
	protected void end()
	{
		// Disable the shooter and feeder PID controllers
		Robot.shooter.disableShooterPIDs();
		Robot.shooter.disableFeederPID();
		
		// Disable the ball transport
		Robot.ballPickup.disableTransport();
		
		// Reset the started booleans
		m_shooter_started = false;
		m_feeder_started  = false;
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted()
	{
		this.end();
	}
}
