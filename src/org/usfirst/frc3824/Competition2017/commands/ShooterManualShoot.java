// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3824.Competition2017.commands;

import edu.wpi.first.wpilibj.RobotState;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc3824.Competition2017.Constants;
import org.usfirst.frc3824.Competition2017.Robot;

/**
 * Method to perform a manual shoot. The method sets the shooter speed and activates the feeder
 * when the shooter is at speed
 */
public class ShooterManualShoot extends Command
{
	// Instantiate a timer to determine 
	Timer timer = new Timer();
	
	private final int STATE_CLEAR_BALLS   = 1;
	private final int STATE_START_SHOOTER = 2;
	private final int STATE_SHOOT         = 3;
	
	private boolean agitate = false;
	
	private int    state;
	private double nextStateChangeTime;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public ShooterManualShoot()
	{
		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.shooter);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	// Called just before this Command runs the first time
	protected void initialize()
	{
		// Initialize the state machine
		state = STATE_CLEAR_BALLS;
		nextState();

		// Initialize the timer
		timer.reset();
		timer.start();		
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute()
	{
		// start with feeder in reverse
		if (timer.get() > nextStateChangeTime)
			nextState();
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished()
	{
		// Determine when the user releases the shoot button
		if (RobotState.isOperatorControl() && Robot.oi.controllerJoystick.getRawButton(20) == false)
			return true;
			
		return false;
	}

	// Called once after isFinished returns true
	protected void end()
	{
		// Disable the shooter and feeder PID controllers
		Robot.shooter.disableShooterPIDs();
		Robot.shooter.disableFeederPID();
		
		// Disable the ball transport
		Robot.ballPickup.disableTransport();
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted()
	{
		this.end();
	}
	
	/**
	 * Method to control the shooter state machine
	 * 
	 * States: Clear Balls -> Start Shooter -> Shoot Balls
	 */
	private void nextState()
	{
		switch (state)
		{
			case STATE_CLEAR_BALLS:
			{
				// Enable the ball transport to help feed the balls
				Robot.ballPickup.setTransport(Constants.TRANSPORT_SLOW_VOLTAGE);
			
				// Enable the feeder to feed the balls
				Robot.shooter.enableFeederPID();

				// Reverse feeder speed to ensure a ball is not in the shooter chamber
				Robot.shooter.setFeederSpeed(Constants.FEEDER_REVERSE_SPEED);
		
				// Update for next state
				state = STATE_START_SHOOTER;
				nextStateChangeTime = Constants.FEEDER_CLEAR_BALLS_TIME;
				break;
			}
			
			case STATE_START_SHOOTER:
			{
				// Stop the feeder motor to prepare for shooting
				Robot.shooter.setFeederSpeed(0.0);
				
				// Enable the shooter PID
				Robot.shooter.enableShooterPIDs();

				// Enable the motor based on the already set speed
				Robot.shooter.enableShooterMotor();	
			
				// Update for next state
				state = STATE_SHOOT;	
				nextStateChangeTime += Constants.SHOOTER_SPINUP_TIME;
				break;
			}
			
			case STATE_SHOOT:
			{
				// Set the feeder speed
				Robot.shooter.setFeederSpeed(Constants.DEFAULT_FEEDER_SPEED);
				
				if (!agitate)
				{
					Robot.ballPickup.setTransport(-Constants.TRANSPORT_SLOW_VOLTAGE);
				} else
				{
					Robot.ballPickup.setTransport(Constants.TRANSPORT_SLOW_VOLTAGE);
				}

				// Reverse the transport direction
				agitate = !agitate;
				
				// Determine the transport direction
				if (agitate)
				   nextStateChangeTime += 1.0;
				else
				   nextStateChangeTime += 0.5;			
				break;
			}
			
			default:
			{
				
			}
		}
	}
}
