// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3824.Competition2017.commands;

import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc3824.Competition2017.Constants;
import org.usfirst.frc3824.Competition2017.Robot;

/**
 *
 */
public class ShooterUnjam extends Command
{
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	private double m_initialShooterSpeed; 
	
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public ShooterUnjam()
	{
		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.shooter);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	// Called just before this Command runs the first time
	protected void initialize()
	{
		// Get the present shooter speed set point
		m_initialShooterSpeed = Robot.shooter.getShooterClassMemberSpeed();
		
		// Enable the feeder to feed the balls
		Robot.shooter.enableFeederPID();

		// Run the feeder and shooter motors backwards
		Robot.shooter.setFeederSpeed(Constants.FEEDER_UNJAM_SPEED);
		
		// Enable the shooter PID
		Robot.shooter.enableShooterPIDs();

		// Enable the motor based on the already set speed
		Robot.shooter.setShooterSpeed(Constants.SHOOTER_UNJAM_SPEED);	
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute()
	{
		
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished()
	{
		// Run the motors until the user releases the JAM button
		if (Robot.oi.getControllerJoystick().getRawButton(3) == false)
			return true;
		
		return false;
	}

	// Called once after isFinished returns true
	protected void end()
	{
		// Disable the shooter and feeder PID controllers
		Robot.shooter.disableShooterPIDs();
		Robot.shooter.disableFeederPID();
		
		// Reset the shooter speed set point
		Robot.shooter.setShooterSetSpeed(m_initialShooterSpeed); 
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted()
	{
		this.end();
	}
}
