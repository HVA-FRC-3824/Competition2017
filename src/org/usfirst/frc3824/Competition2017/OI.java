// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3824.Competition2017;

import org.usfirst.frc3824.Competition2017.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;

/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI
{
	//// CREATING BUTTONS
	// One type of button is a joystick button which is any button on a
	//// joystick.
	// You create one by telling it which joystick it's on and which button
	// number it is.
	// Joystick stick = new Joystick(port);
	// Button button = new JoystickButton(stick, buttonNumber);

	// There are a few additional built in buttons you can use. Additionally,
	// by subclassing Button you can create custom triggers and bind those to
	// commands the same as any other Button.

	//// TRIGGERING COMMANDS WITH BUTTONS
	// Once you have a button, it's trivial to bind it to a button in one of
	// three ways:

	// Start the command when the button is pressed and let it run the command
	// until it is finished as determined by it's isFinished method.
	// button.whenPressed(new ExampleCommand());

	// Run the command while the button is being held down and interrupt it once
	// the button is released.
	// button.whileHeld(new ExampleCommand());

	// Start the command when the button is released and let it run the command
	// until it is finished as determined by it's isFinished method.
	// button.whenReleased(new ExampleCommand());

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton shootButton;
    public JoystickButton shifter;
    public JoystickButton enableShooter;
    public JoystickButton shooterDisable;
    public JoystickButton shooterSpeedA;
    public JoystickButton shooterSpeedB;
    public JoystickButton shooterSpeedC;
    public JoystickButton shooterSpeedD;
    public JoystickButton ballPickupEnable;
    public JoystickButton ballPickupDisable;
    public Joystick driveJoystick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	public OI()
	{
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        driveJoystick = new Joystick(0);
        
        ballPickupDisable = new JoystickButton(driveJoystick, 5);
        ballPickupDisable.whenPressed(new BallPickupEnableDisable(false));
        ballPickupEnable = new JoystickButton(driveJoystick, 5);
        ballPickupEnable.whenPressed(new BallPickupEnableDisable(true));
        shooterSpeedD = new JoystickButton(driveJoystick, 12);
        shooterSpeedD.whenPressed(new ShooterSetSpeed(3500));
        shooterSpeedC = new JoystickButton(driveJoystick, 11);
        shooterSpeedC.whenPressed(new ShooterSetSpeed(0));
        shooterSpeedB = new JoystickButton(driveJoystick, 10);
        shooterSpeedB.whenPressed(new ShooterSetSpeed(2000));
        shooterSpeedA = new JoystickButton(driveJoystick, 9);
        shooterSpeedA.whenPressed(new ShooterSetSpeed(1000));
        shooterDisable = new JoystickButton(driveJoystick, 8);
        shooterDisable.whenPressed(new ShooterEnableDisable(false));
        enableShooter = new JoystickButton(driveJoystick, 7);
        enableShooter.whenPressed(new ShooterEnableDisable(true));
        shifter = new JoystickButton(driveJoystick, 1);
        shifter.whenPressed(new ChassisShift(true));
        shootButton = new JoystickButton(driveJoystick, 1);
        shootButton.whenPressed(new ShooterManualShoot(0, 0));


        // SmartDashboard Buttons
        SmartDashboard.putData("Chassis Drive Distance: FiveFeet", new ChassisDriveDistance(60.0, .75, false));
        SmartDashboard.putData("Chassis Turn Angle: Right", new ChassisTurnAngle(90.0, 0.5, false));
        SmartDashboard.putData("Chassis Drive Range: TwelveInches", new ChassisDriveRange(12.0, 0.75, false));
        SmartDashboard.putData("Climber Control", new ClimberControl());
        SmartDashboard.putData("Line Up With Target", new LineUpWithTarget());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	}

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getDriveJoystick() {
        return driveJoystick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}
