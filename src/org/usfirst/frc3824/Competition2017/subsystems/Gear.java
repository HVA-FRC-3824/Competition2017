// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3824.Competition2017.subsystems;

import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDOutput;

import org.usfirst.frc3824.Competition2017.Constants;
import org.usfirst.frc3824.Competition2017.RobotMap;

import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.SpeedController;

import edu.wpi.first.wpilibj.command.Subsystem;

/**
 *
 */
public class Gear extends Subsystem
{
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final Solenoid gearPusher = RobotMap.gearGearPusher;
    private final SpeedController gearSucker = RobotMap.gearGearSucker;
    private final SpeedController gearRotator = RobotMap.gearGearRotator;
    private final Encoder gearRotatorEncoder = RobotMap.gearGearRotatorEncoder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    private PIDController rotatorEncoderPID = new PIDController(Constants.ROTATOR_P,
            Constants.ROTATOR_I, 
            Constants.ROTATOR_D, 
            gearRotatorEncoder, new rotatorEncoderPIDOutput());
    
    public Gear()
    {
    	resetGearRotatorEncoderPID();
    	
    	// Set the encoder input value range
    	rotatorEncoderPID.setInputRange(Constants.ROTATOR_MIN_INPUT, Constants.ROTATOR_MAX_INPUT);
    			
    	// Set the encoder output range
    	rotatorEncoderPID.setOutputRange(Constants.ROTATOR_MIN_OUTPUT, Constants.ROTATOR_MAX_OUTPUT);
    }
    
	// Put methods for controlling this subsystem
	// here. Call these from Commands.
    
    /**
	 * Method to reset the encoder PID for the gear rotator
	 */
    public void resetGearRotatorEncoderPID()
    {
    	rotatorEncoderPID.reset();
    	
    	gearRotatorEncoder.reset();
    }
    
    /**
	 * Method to enable the encoder PID for the gear rotator
	 */
    public void enableGearRotatorEncoderPID()
    {
    	rotatorEncoderPID.enable();
    }
    
    /**
	 * Method to enable the encoder PID for the gear rotator
	 */
    public void disableGearRotatorEncoderPID()
    {
    	rotatorEncoderPID.disable();
    }
    
    /**
	 * Method to update the encoder PID setpoint for the gear rotator
	 */
    public void updateGearRotatorEncoderPIDSetpoint(double encoderValue)
    {
    	rotatorEncoderPID.setSetpoint(encoderValue);
    }
    
    /**
	 * Method to get the current encoder PID setpoint for the gear rotator
	 */
    public double getGearRotatorEncoderPIDSetpoint()
    {
    	return rotatorEncoderPID.getSetpoint();
    }
    
	/**
	 * Method to set the intake speed
	 */
	public void setIntake(double speed)
	{
		gearSucker.set(speed);
	}
    
	/**
	 * Method to set the position of the gear rotator
	 */
	public void setRotator(String pos)
	{	
		if (pos.equals("Up"))
		{
			updateGearRotatorEncoderPIDSetpoint(Constants.UP_ROTATOR_POS);
		} else if (pos.equals("Down"))
		{
			updateGearRotatorEncoderPIDSetpoint(Constants.DOWN_ROTATOR_POS);
		} else
		{
			updateGearRotatorEncoderPIDSetpoint(Constants.PLACE_ROTATOR_POS);
		}
	}
	
	/**
	 * Method to set the gear pusher piston in or out
	 *    true  - out
	 *    false - in
	 */
	public void setPush(boolean in)
	{
		gearPusher.set(in);
	}

	/**
	 * Method to get the current position of the gear pusher
	 */
	public boolean getPush()
	{
		return gearPusher.get();
	}

	/**
	 * Method to place gear
	 */
	public void place()
	{
			
	}
	
	public void initDefaultCommand()
	{
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
	}
	
	/**
	 * Class declaration for the PIDOutput
	 */
	public class rotatorEncoderPIDOutput implements PIDOutput
	{
		/**
		 * Virtual function to receive the PID output and set the drive direction
		 */
		public void pidWrite(double PIDoutput)
		{
			gearRotator.set(PIDoutput);
		}
	}	
}
