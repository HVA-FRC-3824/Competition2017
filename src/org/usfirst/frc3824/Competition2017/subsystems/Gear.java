// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3824.Competition2017.subsystems;

import org.usfirst.frc3824.Competition2017.Constants;
import org.usfirst.frc3824.Competition2017.RobotMap;

import com.ctre.CANTalon;

import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.command.Subsystem;

/**
 *
 */
public class Gear extends Subsystem
{
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon sucker = RobotMap.gearSucker;
    private final CANTalon rotator = RobotMap.gearRotator;
    private final CANTalon guide = RobotMap.gearGuide;
    private final Solenoid grip = RobotMap.gearGrip;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    public Gear()
    {
    	// Setup gear manipulation rotator feedback and output
    	rotator.setFeedbackDevice(CANTalon.FeedbackDevice.CtreMagEncoder_Relative);
    	rotator.reverseSensor(false);	
    	rotator.configNominalOutputVoltage(0.0f,  0.0f);
    	rotator.configPeakOutputVoltage(4.0f,  -4.0f);
    	rotator.reverseOutput(false);
    	rotator.setProfile(0);
    	rotator.configEncoderCodesPerRev(8192);
    	rotator.setP(Constants.ROTATOR_P);
    	rotator.setI(Constants.ROTATOR_I);
    	rotator.setD(Constants.ROTATOR_D);
    	rotator.setF(Constants.ROTATOR_F);
    	rotator.changeControlMode(CANTalon.TalonControlMode.Position);    	
    	rotator.setEncPosition(0);
    	
    	// Setup guide intake feedback and output
    	guide.setFeedbackDevice(CANTalon.FeedbackDevice.CtreMagEncoder_Relative);
    	guide.reverseSensor(false);	
    	guide.configNominalOutputVoltage(0.0f,  0.0f);
    	guide.configPeakOutputVoltage(12.0f,    -12.0f);
    	guide.reverseOutput(true);
    	guide.setProfile(0);
    	guide.configEncoderCodesPerRev(4096);
    	guide.setP(Constants.GUIDE_P);
    	guide.setI(Constants.GUIDE_I);
    	guide.setD(Constants.GUIDE_D);
    	guide.setF(Constants.GUIDE_F);
    	guide.changeControlMode(CANTalon.TalonControlMode.Speed);
    	guide.setEncPosition(0);
    	
    	resetAndEnableGear();
    	
    	// Setup gear manipulation intake feedback and output
    	sucker.configNominalOutputVoltage(0.0f,  0.0f);
    	sucker.configPeakOutputVoltage(12.0f,  -12.0f);
    	sucker.reverseOutput(false);
    	sucker.changeControlMode(CANTalon.TalonControlMode.Voltage);
    }
    
	// Put methods for controlling this subsystem
	// here. Call these from Commands.
    
    /**
	 * Method to reset and enable the encoder input for the gear rotator
	 */
    public void resetAndEnableGear()
    {
    	rotator.reset();
    	rotator.enable();
    	
    	guide.reset();
    	guide.enable();
    }
    
    /**
	 * Method to update the encoder PID setpoint for the gear rotator
	 */
    public void updateRotatorSetpoint(double encoderValue)
    {
    	rotator.setSetpoint(encoderValue);
    }
    
    public double getRotatorEncoderValue()
    {
    	return rotator.getEncPosition();
    }
    
    public double getGuideEncoderValue()
    {
    	return guide.getEncPosition();
    }
    
	/**
	 * Method to set the intake speed
	 */
	public void setIntake(double volts)
	{
		sucker.setSetpoint(volts);
	}
	
	/**
	 * Method to set the guide speed
	 */
	public void setGuide(double setpoint)
	{
		guide.setSetpoint(setpoint);
	}
    
	/**
	 * Method to set the position of the gear rotator
	 */
	public void setRotator(String pos)
	{	
		if (pos.equals("Up"))
		{
			updateRotatorSetpoint(Constants.UP_ROTATOR_POS);
		} else if (pos.equals("Down"))
		{
			updateRotatorSetpoint(Constants.DOWN_ROTATOR_POS);
		} else
		{
			updateRotatorSetpoint(Constants.PLACE_ROTATOR_POS);
		}
	}
	
	/**
	 * Method to set the gear gripper piston in or out
	 *    true  - out
	 *    false - in
	 */
	public void setGrip(boolean in)
	{
		grip.set(in);
	}

	/**
	 * Method to get the current position of the gear gripper
	 */
	public boolean getGrip()
	{
		return grip.get();
	}
	
	public CANTalon getRotator()
	{
		return rotator;
	}
	
	public CANTalon getGuide()
	{
		return guide;
	}
	
	public void initDefaultCommand()
	{
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
	}	
}
