// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3824.Competition2017.subsystems;

import org.usfirst.frc3824.Competition2017.RobotMap;
import org.usfirst.frc3824.Competition2017.commands.*;
import com.ctre.CANTalon;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class Shooter extends Subsystem
{
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon shooter = RobotMap.shooterShooter;
    private final CANTalon feeder = RobotMap.shooterFeeder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	public Shooter()
	{
		//********************************************************************
		// Configure the Shooter Talon SRX
		//********************************************************************
		shooter.setFeedbackDevice(CANTalon.FeedbackDevice.CtreMagEncoder_Relative);
		shooter.reverseSensor(true);

		// Set the peak and nominal outputs, 12V means full
		shooter.configNominalOutputVoltage(0.0f, 0.0f);
		shooter.configPeakOutputVoltage(12.0f, -12.0f);

		// Set closed loop gains in slot0
		SmartDashboard.putNumber("Shooter P", 50.0);
		SmartDashboard.putNumber("Shooter I",  0.4);
		SmartDashboard.putNumber("Shooter D",  0.0);
		SmartDashboard.putNumber("Shooter F",  0.0);
		SmartDashboard.putNumber("Shooter RPM Setpoint", 4500);

		// Set the profile for the PID parameters
		shooter.setProfile(0);
		shooter.configEncoderCodesPerRev(4096);

		// Use the PID values from the SmartDashboard, which were just set
		shooter.setP(SmartDashboard.getNumber("Shooter P", 50.0) / 1000);
		shooter.setI(SmartDashboard.getNumber("Shooter I",  0.4) / 1000);
		shooter.setD(SmartDashboard.getNumber("Shooter D",  0.0) / 1000);
		shooter.setF(SmartDashboard.getNumber("Shooter F",  0.0) / 1000);

		//********************************************************************
		// Configure the Feeder Talon SRX
		//********************************************************************
		feeder.setFeedbackDevice(CANTalon.FeedbackDevice.CtreMagEncoder_Relative);
		feeder.reverseSensor(true);
		feeder.reverseOutput(false);

		// Set the peak and nominal outputs, 12V means full
		feeder.configNominalOutputVoltage(0.0f, 0.0f);
		feeder.configPeakOutputVoltage(12.0f, -12.0f);

		// Set closed loop gains in slot0
		SmartDashboard.putNumber("Feeder P", 50.0);
		SmartDashboard.putNumber("Feeder I",  0.4);
		SmartDashboard.putNumber("Feeder D",  0.0);
		SmartDashboard.putNumber("Feeder F",  0.0);
		SmartDashboard.putNumber("Feeder RPM Setpoint", 500);

		// Set the profile for the PID parameters
		feeder.setProfile(0);
		feeder.configEncoderCodesPerRev(4096);

		// Use the PID values from the SmartDashboard, which were just set
		feeder.setP(SmartDashboard.getNumber("Feeder P", 50.0) / 1000);
		feeder.setI(SmartDashboard.getNumber("Feeder I",  0.4) / 1000);
		feeder.setD(SmartDashboard.getNumber("Feeder D",  0.0) / 1000);
		feeder.setF(SmartDashboard.getNumber("Feeder F",  0.0) / 1000);
	}

	public void initDefaultCommand()
	{
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	}

	/**
	 * Method to set the Shooter wheel RPM
	 * @param RPM
	 */
	public void setShooterRPM(double RPM)
	{
		// Set the Talon in PID speed mode
		shooter.changeControlMode(CANTalon.TalonControlMode.Speed);

		// Set the desired speed
		shooter.set(RPM);
	}

	/**
	 * Method to set the Feeder wheel RMP
	 * @param RPM
	 */
	public void setFeederRPM(double RPM)
	{
		// Set the Talon in PID speed mode
		feeder.changeControlMode(CANTalon.TalonControlMode.Speed);

		// Set the desired speed
		feeder.set(RPM);
	}

	/**
	 * Method to enable the shooter PID controller
	 */
	public void enableShooterPID()
	{
		shooter.enable();
	}
	
	/**
	 * Method to enable the feeder PID controller
	 */
	public void enableFeederPID()
	{
		feeder.enable();
	}

	/**
	 * Method to disable the Shooter and Feeder PID controllers
	 */
	public void disableShooterFeederPIDs()
	{
		shooter.disable();
		feeder.disable();
	}

	/**
	 * Method to set the Shooter PID parameters
	 * @param F
	 * @param P
	 * @param I
	 * @param D
	 */
	public void setShooterPID_Parameters(double F, double P, double I, double D)
	{
		// Read the F, P, I and D parameters from the smartdashboard
		shooter.setF(F);
		shooter.setP(P);
		shooter.setI(I);
		shooter.setD(D);
	}

	/**
	 * Method to read the shooter PID parameters from the SmartDashboard
	 */
	public void setShooterPID_ParametersFromSmartdashboard()
	{
		// Read the F, P, I and D parameters from the SmartDashboard
		// divide everything by 1000 so SmartDashboard numbers are not really small
		shooter.setF(SmartDashboard.getNumber("Shooter F", 0.0) / 1000);
		shooter.setP(SmartDashboard.getNumber("Shooter P", 0.0) / 1000);
		shooter.setI(SmartDashboard.getNumber("Shooter I", 0.0) / 1000);
		shooter.setD(SmartDashboard.getNumber("Shooter D", 0.0) / 1000);
	}

	/**
	 * Method to set the Shooter speed from the SmartDashboard
	 */
	public void setShooterRPM_FromSmartdashboard()
	{
		setShooterRPM(SmartDashboard.getNumber("Shooter RPM Setpoint", 4500));
	}

	/**
	 * Method to set the Feeder PID parameters
	 * @param F
	 * @param P
	 * @param I
	 * @param D
	 */
	public void setFeederPID_Parameters(double F, double P, double I, double D)
	{
		// Read the F, P, I and D parameters from the SmartDashboard
		feeder.setF(F);
		feeder.setP(P);
		feeder.setI(I);
		feeder.setD(D);
	}

	/**
	 * Method to set the Feeder PID parameters from the SmartDashboard
	 */
	public void setFeederPID_ParametersFromSmartdashboard()
	{
		// Read the F, P, I and D parameters from the SmartDashboard
		// divide everything by 1000 so SmartDashboard numbers are not really small
		feeder.setF(SmartDashboard.getNumber("Feeder F", 0.0) / 1000);
		feeder.setP(SmartDashboard.getNumber("Feeder P", 0.0) / 1000);
		feeder.setI(SmartDashboard.getNumber("Feeder I", 0.0) / 1000);
		feeder.setD(SmartDashboard.getNumber("Feeder D", 0.0) / 1000);
	}

	/**
	 * Method to set the Feeder speed from the SmartDashboard
	 */
	public void setFeederRPM_FromSmartdashboard()
	{
		setFeederRPM(SmartDashboard.getNumber("Feeder RPM Setpoint", 500));
	}
	
	/**
	 * 
	 * @param power
	 */
	public void setShooterPower(double power)
	{
		// Set the Talon in PID voltage mode
		shooter.changeControlMode(CANTalon.TalonControlMode.Voltage);
		shooter.set(power);
	}
	
	/**
	 * 
	 * @param power
	 */
	public void setFeederPower(double power)
	{
		// Set the Talon in PID voltage mode
		feeder.changeControlMode(CANTalon.TalonControlMode.Voltage);
		feeder.set(power);
	}
	
	public double getShooterSpeed()
	{
		return shooter.getSpeed();
	}
	
	public double getFeederSpeed()
	{
		return feeder.getSpeed();
	}
}
