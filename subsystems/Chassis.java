// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3824.Competition2017.subsystems;

import org.usfirst.frc3824.Competition2017.Robot;
import org.usfirst.frc3824.Competition2017.RobotMap;
import org.usfirst.frc3824.Competition2017.commands.*;

import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

import edu.wpi.first.wpilibj.command.Subsystem;

/**
 *
 */
public class Chassis extends Subsystem
{
	public static double ULTRASONIC_X1 = 0.086669;
	public static double ULTRASONIC_Y1 = 10.0;
	
	public static double ULTRASONIC_X2 = 0.467592;
	public static double ULTRASONIC_Y2 = 50.0;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController driveLeft = RobotMap.chassisDriveLeft;
    private final SpeedController driveRight = RobotMap.chassisDriveRight;
    private final RobotDrive robotDrive = RobotMap.chassisRobotDrive;
    private final AnalogInput ultrasound = RobotMap.chassisUltrasound;
    private final AnalogGyro gyro = RobotMap.chassisGyro;
    private final Encoder encoderLeft = RobotMap.chassisEncoderLeft;
    private final Encoder encoderRight = RobotMap.chassisEncoderRight;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	// Put methods for controlling this subsystem
	// here. Call these from Commands.

	public void initDefaultCommand()
	{
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new TeleopDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
	}

	/*
	 * Method to control the drive through the specified joystick
	 */
	public void driveWithJoystick(Joystick stick)
	{
		// Cube twist to decrease sensitivity
		double twist = stick.getTwist();
		twist = twist * twist * twist;

		// Square forward/backward to decrease sensitivity
		double moveValue = stick.getY();
		if (moveValue < 0)
		{
			// remember to preserve direction, it is lost when squaring
			moveValue = -1.0 * (moveValue * moveValue);
		} 
		else
		{
			moveValue = moveValue * moveValue;
		}

		// Drive with arcade control
		Robot.chassis.robotDrive.arcadeDrive(moveValue, twist);
	}
}
